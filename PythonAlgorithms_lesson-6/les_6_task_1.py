'''
Курс "Алгоритмы и структуры данных на Python."
Урок # 6.
Задание # 1.

Задачей, которая стоит внимания для проведения эксперимента с памятью, решил выбрать следующую:
Поиск простых чисел среди n натуральных чисел. Методоми решета Эратосфена, решета Аткина и классическим перебором.

Вывод
  Классический метод проверки на "простоту" гораздо менее затратен по памяти. И вообще в иделале память занимает только
  результирующая последовательность простых чисел.
  А решето Эратосфена и Аткинса гораздо более требовательны к памимяти, хоть гораздо более эффективны по скорости.
  Возможно необходимо их реализовывать с разбивкой на несколько "решет". И википедии такие методы описаны. Они будут
  безумно эффективны на многопроцессорных компьютерах умеющих вести действительно параллельные вычисления.

  Еще один вывод - использование конструкции "i in range(1,n)" безумно неэффективны по памяти, т.к. неявно создают
  массив элементов. Поэтому в данной задаче нужно избегать циклов for в python.

  Для визуализации выводов к заданию приложен эксельный файл с таблицей и графиком. На графике видоно, что решето
  Эратосфена и Аткинса примерно одинаково требовательны по памяти. Но, судя по математическим выкладкам, ассимпротически
  метод Аткинса более экономичный и эффективный.
'''

from math import sqrt
from sys import getsizeof


def get_size(x):
    _size = getsizeof(x)
    # print(f'type={type(x)}, size={getsizeof(x)}, obj={x}')
    if hasattr(x, '__iter__'):
        if hasattr(x, 'items'):
            for key, value in x.items():
                _size += get_size(key)
                _size += get_size(value)
        elif not isinstance(x, str):
            for item in x:
                _size += get_size(item)
    return _size


def classic(limit):

    result = []

    i = 2
    while i <= limit:
    # for i in range(2, limit + 1):
        for el in result:
            if i % el == 0:
                break
        else:
            result.append(i)
        i += 1

    print(f'Использовано памяти (for)  : {get_size(result) + get_size(i) + get_size(el) + get_size(range(2, limit + 1))} байт')
    print(f'Использовано памяти (while): {get_size(result) + get_size(i) + get_size(el) + get_size(range(2, limit + 1))} байт')

    return result

# *********************************** n = 100 ************************************
# Использовано памяти (for)  : 3832 байт
# Использовано памяти (while): 3832 байт
# classic:      [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]
#
# *********************************** n = 250 ************************************
# Использовано памяти (for)  : 9080 байт
# Использовано памяти (while): 9080 байт
# classic:      [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241]
#
# *********************************** n = 500 ************************************
# Использовано памяти (for)  : 17640 байт
# Использовано памяти (while): 17640 байт
# classic:      [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499]
#
# *********************************** n = 750 ************************************
# Использовано памяти (for)  : 26012 байт
# Использовано памяти (while): 26012 байт
# classic:      [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743]
#
# *********************************** n = 1000 ***********************************
# Использовано памяти (for)  : 34220 байт
# Использовано памяти (while): 34220 байт
# classic:      [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]

def sieve_of_eratosthenes(limit):
    limit += 1
    sieve_of_e = [i for i in range(limit)]
    sieve_of_e[1] = 0

    for i in range(2, limit):
        if sieve_of_e[i] != 0:
            j = i * 2
            while j < limit:
                sieve_of_e[j] = 0
                j += i

    result = [i for i in sieve_of_e if i != 0]

    print(f'Использовано памяти (for)  : {get_size(result) + get_size(i) + get_size(j) + get_size(limit) + get_size(sieve_of_e) + get_size(range(2, limit))} байт')
    print(f'Использовано памяти (while): {get_size(result) + get_size(i) + get_size(j) + get_size(limit) + get_size(sieve_of_e)} байт')

    return result

# *********************************** n = 100 ************************************
# Использовано памяти (for)  : 7288 байт
# Использовано памяти (while): 4468 байт
# eratosthenes: [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]
#
# *********************************** n = 250 ************************************
# Использовано памяти (for)  : 17552 байт
# Использовано памяти (while): 10532 байт
# eratosthenes: [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241]
#
# *********************************** n = 500 ************************************
# Использовано памяти (for)  : 34336 байт
# Использовано памяти (while): 20316 байт
# eratosthenes: [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499]
#
# *********************************** n = 750 ************************************
# Использовано памяти (for)  : 50816 байт
# Использовано памяти (while): 29796 байт
# eratosthenes: [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743]
#
# *********************************** n = 1000 ***********************************
# Использовано памяти (for)  : 67960 байт
# Использовано памяти (while): 39940 байт
# eratosthenes: [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]


def sieve_of_atkins(limit):
    limit += 1

    sqrt_limit = int(sqrt(limit))+1

    sieve_of_a = [0 for _ in range(limit)]
    sieve_of_a[1] = 0

    # Предположительно простые — это целые с нечётным числом представлений в данных квадратных формах.
    # x2 и y2 — это  квадраты i и j (оптимизация).
    x2 = 0
    for i in range(1, sqrt_limit):
        x2 += (2 * i - 1)
        y2 = 0
        for j in range(1, sqrt_limit):
            y2 += 2 * j - 1
            n = 4 * x2 + y2
            if (n < limit) and (n % 12 in (1, 5)):
                sieve_of_a[n] = n - sieve_of_a[n]

            # n = 3 * x2 + y2
            n -= x2  # Оптимизация
            if (n < limit) and (n % 12 == 7):
                sieve_of_a[n] = n - sieve_of_a[n]

            # n = 3 * x2 - y2
            n -= 2 * y2  # Оптимизация
            if (i > j) and (n < limit) and (n % 12 == 11):
                sieve_of_a[n] = n - sieve_of_a[n]

    for i in range(5, limit):
        if sieve_of_a[i]:
            for j in range(i * i, limit, i * i):
                sieve_of_a[j] = 0

    if limit > 4:
        result = [2, 3] + [i for i in sieve_of_a if i != 0]
    elif limit == 4:
        result = [2, 3]
    elif limit == 3:
        result = [2]

    print(f'Использовано памяти (for)  : {get_size(result) + get_size(i) + get_size(j) + get_size(limit) + get_size(sieve_of_a) + get_size(range(1, sqrt_limit)) * 2 + get_size(range(5, limit))} байт')
    print(f'Использовано памяти (while): {get_size(result) + get_size(i) + get_size(j) + get_size(limit) + get_size(sieve_of_a)} байт')

    return result

# *********************************** n = 100 ************************************
# Использовано памяти (for)  : 7852 байт
# Использовано памяти (while): 4460 байт
# atkins:       [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]
#
# *********************************** n = 250 ************************************
# Использовано памяти (for)  : 18356 байт
# Использовано памяти (while): 10484 байт
# atkins:       [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241]
#
# *********************************** n = 500 ************************************
# Использовано памяти (for)  : 35484 байт
# Использовано памяти (while): 20220 байт
# atkins:       [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499]
#
# *********************************** n = 750 ************************************
# Использовано памяти (for)  : 52204 байт
# Использовано памяти (while): 29660 байт
# atkins:       [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743]
#
# *********************************** n = 1000 ***********************************
# Использовано памяти (for)  : 69660 байт
# Использовано памяти (while): 39892 байт
# atkins:       [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]


if __name__ == '__main__':
    n = 100
    print()
    print(f'{" n = " + str(n) + " ":*^80}')

    print('eratosthenes')
    print(f'eratosthenes: {sieve_of_eratosthenes(n)}')
    print('atkins')
    print(f'atkins:       {sieve_of_atkins(n)}')
    print('classic')
    print(f'classic:      {classic(n)}')

    n = 250
    print()
    print(f'{" n = " + str(n) + " ":*^80}')
    print('eratosthenes')
    print(f'eratosthenes: {sieve_of_eratosthenes(n)}')
    print('atkins')
    print(f'atkins:       {sieve_of_atkins(n)}')
    print('classic')
    print(f'classic:      {classic(n)}')

    n = 500
    print()
    print(f'{" n = " + str(n) + " ":*^80}')
    print('eratosthenes')
    print(f'eratosthenes: {sieve_of_eratosthenes(n)}')
    print('atkins')
    print(f'atkins:       {sieve_of_atkins(n)}')
    print('classic')
    print(f'classic:      {classic(n)}')

    n = 750
    print()
    print(f'{" n = " + str(n) + " ":*^80}')
    print('eratosthenes')
    print(f'eratosthenes: {sieve_of_eratosthenes(n)}')
    print('atkins')
    print(f'atkins:       {sieve_of_atkins(n)}')
    print('classic')
    print(f'classic:      {classic(n)}')

    n = 1000
    print()
    print(f'{" n = " + str(n) + " ":*^80}')
    print('eratosthenes')
    print(f'eratosthenes: {sieve_of_eratosthenes(n)}')
    print('atkins')
    print(f'atkins:       {sieve_of_atkins(n)}')
    print('classic')
    print(f'classic:      {classic(n)}')
